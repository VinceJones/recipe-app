{"version":3,"sources":["components/Message/Message.js","components/Page/Page.js","models/Ingredient.js","models/Tag.js","models/Recipe.js","components/StorageHandler.js","components/RecipeConfig.js","components/Button/Button.js","components/Form/IngredientForm.js","components/Form/IngredientFormContainer.js","components/Form/TagForm.js","components/Form/TagFormContainer.js","components/Form/RecipeForm.js","components/Message/MessageService.js","components/Page/FormPage/FormPage.js","components/Modal/Modal.js","components/Modal/DeleteRecipeModal.js","components/Accordion/AccordionSection.js","components/Accordion/Accordion.js","components/Page/ListPage/ListIngredient.js","components/Accordion/ListPageAccordion.js","components/Form/ListPageFilterForm.js","components/FilterHandler.js","components/Page/ListPage/ListPage.js","components/Page/Login/LoginPage.js","components/AuthHandler.js","components/Menu/MenuItem.js","Routes.js","components/Menu/MainMenu.js","App.js","serviceWorker.js","index.js"],"names":["Message","getContainerClass","status","containerClass","concat","react_default","a","createElement","this","message","className","text","props","messageUtility","getMessage","Component","Page","componentDidMount","_this","shown","toggleMessageShown","componentWillUnmount","_callee","regenerator_default","wrap","_context","prev","next","clearMessages","stop","Message_Message_Message","pageTitle","children","Ingredient","ing","arguments","length","undefined","Object","classCallCheck","name","amount","measurementType","Tag","tag","id","Recipe","recipe","tranformIngredientData","ingData","ingredients","forEach","push","transformTagData","tagData","tags","description","StorageHandler","postRecipe","_ref","asyncToGenerator","mark","data","json","headers","options","JSON","stringify","postHeaders","method","body","makeRequest","endpoints","postRecipes","then","responseJson","catch","error","console","log","abrupt","sent","_x","apply","putRecipe","_ref2","_callee2","_context2","updateRecipe","_x2","getRecipes","_callee3","_context3","responseData","parse","recipes","recipeData","getRecipeById","_ref4","_callee4","endpoint","_context4","isEmpty","parsedData","_x3","obj","key","hasOwnProperty","deleteRecipeById","_ref5","_callee5","_context5","deleteRecipe","_x4","_ref6","_callee6","_args6","_context6","fetch","host","response","result","_x5","Headers","append","RecipeConfig","value","rows","columns","Button","onClick","e","preventDefault","attributes","classes","attr","link","isBtn","objectSpread","recipeConfig","IngredientForm","handleFieldChange","event","inputElement","target","ingredient","onChange","type","measurementTypes","map","measurement","index","showDeleteButton","Button_Button","requestDeleteGroup","IngredientFormContainer","newIngValues","toConsumableArray","_this2","IngredientForm_IngredientForm","shouldShowDeleteButton","requestAddGroup","TagForm","requestDeleteTag","TagFormContainer","newTagValues","TagForm_TagForm","requestAddTag","RecipeForm","handleSubmit","onSubmit","handleRecipeFieldChange","textAreaConfig","cols","TagFormContainer_TagFormContainer","handleChildFieldChange","handleDeleteItemFromArray","handleAddTag","IngredientFormContainer_IngredientFormContainer","handleDeleteIngredientGroup","handleAddIngredientGroup","MessageService","statuses","WARNING","ERROR","SUCCESS","getPostMessageStatus","saved","getSavedRecipeMessage","getRecipeNotFoundStatus","getRecipeNotFoundMessage","getRecipeUpdateStatus","getRecipeUpdateMessage","getRecipeDeleteStatus","getRecipeDeleteMessage","getRecipeDeleteFailStatus","getRecipeDeleteFailMessage","storageHandler","messageService","FormPage","possibleConstructorReturn","getPrototypeOf","call","getRecipeFromPath","setPageTitle","state","setState","recipeId","match","params","parseInt","setMessage","history","recipeFieldElement","field","newValuesCollection","filter","ingIdx","propName","item","itemIdx","_ref3","res","bind","assertThisInitialized","Page_Page_Page","RecipeForm_RecipeForm","fieldName","Modal","getShowHideClassName","show","hideModal","DeleteRecipeModal","Modal_Modal_Modal","showModal","recipeName","handleDeleteRecipe","AccordionSection","label","isOpen","getArrowIcon","Accordion","_assertThisInitialize","allowMultipleOpen","openSections","defineProperty","child","Accordion_AccordionSection","defaultProps","ListIngredient","React","ListPageAccordion","components_Accordion_Accordion","ListIngredient_ListIngredient","ListPageFilterForm","filterList","filterValue","placeholder","ListPageAccordion_ListPageAccordion","FilterHandler","items","search","haystack","needle","Array","i","String","toLowerCase","filterHandler","ListPage","updateStateWithRecipes","filteredRecipes","updatedList","filterItems","ListPageFilterForm_ListPageFilterForm","DeleteRecipeModal_DeleteRecipeModal","authHandler","AuthHandler","getClientId","clientId","getAccessToken","code","accessToken","_args3","redirectUri","LoginPage","client_id","onSuccess","onFailure","GitHubLogin_default","MenuItem","path","Routes","MainMenu","route","Menu_MenuItem","menuClass","App","react_router_dom","components_Menu_MainMenu","react_router","App_PropsRoute","exact","component","PropsRoute","objectWithoutProperties","assign","render","routeProps","_len","_key","finalProps","renderMergedProps","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.883b3b3e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Message.css';\n\n/**\n * Handle messages set in the header.\n */\nexport default class Message extends Component {\n  /**\n   * Get the message properties from message utility.\n   */\n  get message() {\n    if (this.props && this.props.messageUtility) {\n      return this.props.messageUtility.getMessage();\n    }\n    \n    return {};\n  }\n\n  /**\n   * Get the container class based on the status.\n   *\n   * @param {string} status\n   * @public\n   */\n  getContainerClass = status => {\n    let containerClass = 'Message-container';\n\n    switch (status) {\n      case 'error':\n        containerClass = containerClass.concat(' Message-error');\n        break;\n      case 'success':\n        containerClass = containerClass.concat(' Message-success');\n        break;\n      case 'warning':\n        containerClass = containerClass.concat(' Message-warning');\n        break;\n      default:\n        return '';\n    }\n    return containerClass;\n  };\n\n  /**\n   * Render Message.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        {this.message && (\n          <div className={this.getContainerClass(this.message.status)}>\n            <p className=\"Message-body\">{this.message.text}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Message from '../Message/Message';\nimport PropTypes from 'prop-types';\n\nimport './Page.css';\n\n/**\n * Page component.\n *\n * @public\n */\nexport default class Page extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Object).isRequired,\n    pageTitle: PropTypes.string.isRequired,\n    messageUtility: PropTypes.object.isRequired\n  };\n\n  /**\n   * Set message state.\n   *\n   * @public\n   */\n  componentDidMount = () => {\n    if (this.props.messageUtility && !this.props.messageUtility.message.shown) {\n      this.props.messageUtility.toggleMessageShown();\n    }\n  };\n\n  /**\n   * Clear messages if they have been shown.\n   *\n   * @public\n   */\n  componentWillUnmount = async () => {\n    if (this.props.messageUtility.message.shown) {\n      await this.props.messageUtility.clearMessages();\n    }\n  };\n\n  /**\n   * Render the form.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        <div>\n          <Message messageUtility={this.props.messageUtility}/>\n        </div>\n        <div className=\"page container\">\n          <div>\n            <h1 className=\"Page-title\">{this.props.pageTitle}</h1>\n          </div>\n          <div>{this.props.children}</div>\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * Ingredient model.\n */\nexport default class Ingredient {\n  /**\n   * Ingredient constructor.\n   *\n   * @param {Object} ing\n   */\n  constructor(ing = {}) {\n    this.name = ing.name ? ing.name : '';\n    this.amount = ing.amount ? ing.amount : '';\n    this.measurementType = ing.measurementType ? ing.measurementType : '';\n  }\n}\n","/**\n * Tag model.\n *\n * @public\n */\nexport default class Tag {\n  /**\n   * Tag constructor.\n   *\n   * @param {Object} tag\n   * @public\n   */\n  constructor(tag = {}) {\n    this.id = tag.id ? tag.id : '';\n    this.name = tag.name ? tag.name : '';\n  }\n}\n","import Ingredient from './Ingredient';\nimport Tag from './Tag';\n\n/**\n * Recipe model.\n *\n * @public\n */\nexport default class Recipe {\n  /**\n   * Recipe constructor.\n   *\n   * @param {Object} recipe\n   */\n  constructor(recipe = {}) {\n    this.id = recipe.id !== '' ? recipe.id : '';\n    this.name = recipe.name ? recipe.name : '';\n    this.description = recipe.description ? recipe.description : '';\n    this.ingredients = this.tranformIngredientData(recipe.ingredients);\n    this.tags = this.transformTagData(recipe.tags);\n  }\n\n  /**\n   * Transform ingredient data into array of Ingredients.\n   * \n   * @param {Object[]} ingData\n   * @public\n   */\n  tranformIngredientData = ingData => {\n    if (!ingData) {\n      return [new Ingredient()];\n    }\n\n    const ingredients = [];\n    ingData.forEach(ing => {\n      ingredients.push(new Ingredient(ing));\n    });\n\n    return ingredients;\n  }\n\n  /**\n   * Transform ingredient data into array of Ingredients.\n   * \n   * @param {Object[]} tagData\n   * @public\n   */\n  transformTagData = tagData => {\n    if (!tagData) {\n      return [new Tag()];\n    }\n\n    const tags = [];\n    tagData.forEach(tag => {\n      tags.push(new Tag(tag));\n    })\n\n    return tags;\n  }\n}\n","import Recipe from '../models/Recipe';\n\n/**\n * Handle storage of data.\n */\nexport default class StorageHandler {\n  /**\n   * StorageHandler constructor.\n   *\n   * @public\n   */\n  constructor() {\n    this.endpoints = {\n      host: this.host + '://localhost:5000',\n      postRecipes: '/recipes/post',\n      updateRecipe: '/recipes/update',\n      deleteRecipe: '/recipes/delete',\n      getRecipes: '/recipes/get'\n    };\n  }\n\n  get host() {\n    if (process.env.NODE_ENV === 'production') {\n      return 'http';\n    }\n\n    return 'http';\n  }\n\n  /**\n   * Get headers to send a POST request.\n   *\n   * @public\n   */\n  get postHeaders() {\n    const headers = new Headers();\n    headers.append('Content-type', 'application/json');\n    headers.append('Accept', 'application/json');\n    return headers;\n  }\n\n  /**\n   * Write the data to a storage.\n   *\n   * @param {data}\n   * @public\n   */\n  postRecipe = async data => {\n    const json = JSON.stringify(data);\n    const headers = this.postHeaders;\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: json\n    };\n\n    return await this.makeRequest(this.endpoints.postRecipes, options)\n      .then(responseJson => {\n        return responseJson;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  /**\n   * Write the data to a storage.\n   *\n   * @param {data}\n   * @public\n   */\n  putRecipe = async data => {\n    const json = JSON.stringify(data);\n    const headers = this.postHeaders;\n\n    const options = {\n      method: 'PUT',\n      headers,\n      body: json\n    };\n\n    return await this.makeRequest(this.endpoints.updateRecipe, options)\n      .then(responseJson => {\n        return responseJson;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  /**\n   * Get the recipes from storage.\n   *\n   * @public\n   */\n  getRecipes = async () => {\n    return this.makeRequest(this.endpoints.getRecipes)\n      .then(responseJson => {\n        const responseData = JSON.parse(responseJson.data);\n        const recipes = [];\n\n        responseData.data.forEach(recipeData => {\n          recipes.push(new Recipe(recipeData));\n        });\n\n        return recipes;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  /**\n   * Get recipe by ID.\n   *\n   * @param {number} id\n   * @public\n   */\n  getRecipeById = async id => {\n    const endpoint = this.endpoints.getRecipes + '/' + id;\n\n    return await this.makeRequest(endpoint)\n      .then(responseJson => {\n        if (this.isEmpty(responseJson.data)) {\n          return undefined;\n        }\n        const parsedData = JSON.parse(responseJson.data);\n\n        if (parsedData !== undefined) {\n          return new Recipe(parsedData);\n        }\n\n        return undefined;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  /**\n   * Check if an object is empty.\n   *\n   * @param {Object} obj\n   * @public\n   */\n  isEmpty = obj => {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) return false;\n    }\n    return true;\n  };\n\n  /**\n   * Delete recipe by ID.\n   *\n   * @param {number} id\n   * @public\n   */\n  deleteRecipeById = async id => {\n    const endpoint = this.endpoints.deleteRecipe + '/' + id;\n\n    const options = {\n      method: 'DELETE'\n    };\n\n    return await this.makeRequest(endpoint, options)\n      .then(responseJson => {\n        const responseData = JSON.parse(responseJson.data);\n        return responseData;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  /**\n   * Make a request.\n   *\n   * @param {endpoint}\n   * @param {options}\n   * @public\n   */\n  makeRequest = async (endpoint, options = {}) => {\n    return fetch(this.endpoints.host + endpoint, options)\n      .then(response => response.json())\n      .then(result => {\n        return result;\n      })\n      .catch(error => {\n        console.log('error', error);\n        return error;\n      });\n  };\n}\n","/**\n * Recipe configuration\n */\nexport default class RecipeConfig {\n\n    /**\n     * Get the ingredient measurement types.\n     */\n    get measurementTypes() {\n        return [\n            {\n                name: 'Each',\n                value: 'ea'\n            },\n            {\n                name: 'Pinch',\n                value: 'pinch'\n            },\n            {\n                name: 'Teaspoon(s)',\n                value: 'tsp'\n            },\n            {\n                name: 'Tablespoon(s)',\n                value: 'tbsp'\n            },\n            {\n                name: 'Cup(s)',\n                value: 'cp'\n            },\n            {\n                name: 'Quart(s)',\n                value: 'qt'\n            },\n            {\n                name: 'Gallon(s)',\n                value: 'gl'\n            },\n            {\n                name: 'Ounce(s)',\n                value: 'oz'\n            },\n            {\n                name: 'Pound(s)',\n                value: 'lbs'\n            },\n            {\n                name: 'Liter(s)',\n                value: 'lt'\n            },\n            {\n                name: 'Milliliter(s)',\n                value: 'ml'\n            },\n            {\n                name: 'Gram(s)',\n                value: 'gr'\n            },\n            {\n                name: 'Kilogram(s)',\n                value: 'kilo'\n            }\n        ];\n    };\n\n    /**\n     * Get textare configuration.\n     */\n    get textAreaConfig() {\n        return {\n            rows: '10',\n            columns: '30',\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Button component.\n * \n * @public\n */\nexport default class Button extends Component {\n  static propTypes = {\n    link: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    attr: PropTypes.objectOf(PropTypes.string),\n    isBtn: PropTypes.bool,\n    className: PropTypes.string,\n    onClick: PropTypes.func,\n    preventDefault: PropTypes.bool\n  };\n\n  /**\n   * Get classes to apply to the button.\n   *\n   * @public\n   */\n  get className() {\n    let classes = 'btn';\n\n    if (\n      this.props.className !== undefined &&\n      this.props.className !== null &&\n      this.props.className !== ''\n    ) {\n      classes += ' ' + this.props.className;\n    }\n\n    return classes;\n  }\n\n  /**\n   * Get attributes to apply to the button.\n   * \n   * @public\n   */\n  get attributes() {\n    let attr = {};\n\n    attr['href'] = this.props.link;\n\n    if (this.props.isBtn) attr['role'] = 'button';\n    if (this.props.onClick) attr['onClick'] = this.onClick;\n    if (this.props.className) attr['className'] = this.props.className;\n\n    return {...attr, ...this.props.attr};\n  }\n\n  /**\n   * Handle click events and preventDefault when needed.\n   * \n   * @public\n   */\n  onClick = (e) => {\n    if (this.props.preventDefault) {\n      e.preventDefault();\n    }\n\n    this.props.onClick();\n  }\n\n  /**\n   * Render Button.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <a {...this.attributes}>\n        {this.props.text}\n      </a>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\nimport RecipeConfig from '../RecipeConfig';\nimport Ingredient from '../../models/Ingredient';\n\nconst recipeConfig = new RecipeConfig();\n\n/**\n * IngredientForm component.\n *\n * @public\n */\nexport default class IngredientForm extends Component {\n  static propTypes = {\n    ingredient: PropTypes.instanceOf(Ingredient),\n    onChange: PropTypes.func.isRequired,\n    showDeleteButton: PropTypes.bool.isRequired,\n    requestDeleteGroup: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Handle recipe change events.\n   *\n   * @param {Object} event\n   * @public\n   */\n  handleFieldChange = () => event => {\n    const inputElement = event.target;\n    let ingredient = { ...this.props.ingredient };\n    ingredient[inputElement.name] = inputElement.value;\n    this.props.onChange(ingredient);\n  };\n\n  /**\n   * Render the form.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div className=\"Ingredient-group\">\n        <div className=\"Ingredient-field\">\n          <label>Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.props.ingredient.name}\n            onChange={this.handleFieldChange()}\n          />\n        </div>\n        <div className=\"Ingredient-field Ingredient-fieldInline\">\n          <label>Amount</label>\n          <input\n            className=\"Ingredient-amount\"\n            type=\"text\"\n            name=\"amount\"\n            value={this.props.ingredient.amount}\n            onChange={this.handleFieldChange()}\n          />\n        </div>\n        <div className=\"Ingredient-field Ingredient-fieldInline\">\n          <label>Measurement Type</label>\n          <select\n            name=\"measurementType\"\n            value={this.props.ingredient.measurementType}\n            onChange={this.handleFieldChange()}\n          >\n            {recipeConfig.measurementTypes.map((measurement, index) => (\n              <option value={measurement.value} key={index}>\n                {measurement.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"Ingredient-removeBtn\">\n          {this.props.showDeleteButton ? (\n            <Button\n              text=\"Remove Ingredient\"\n              link=\"#\"\n              className=\"btn btn_secondary\"\n              isBtn={true}\n              onClick={this.props.requestDeleteGroup}\n              preventDefault={true}\n            />\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport IngredientForm from './IngredientForm';\nimport Button from '../Button/Button';\nimport Ingredient from '../../models/Ingredient';\n\n/**\n * IngredientFormContainer component.\n *\n * @public\n */\nexport default class IngredientFormContainer extends Component {\n  static propTypes = {\n    ingredients: PropTypes.arrayOf(PropTypes.instanceOf(Ingredient)),\n    onChange: PropTypes.func.isRequired,\n    requestDeleteGroup: PropTypes.func.isRequired,\n    requestAddGroup: PropTypes.func.isRequired\n  };\n\n  /**\n   * Get whether we should delete the the group.\n   */\n  get shouldShowDeleteButton() {\n    return this.props.ingredients.length > 1;\n  }\n\n  /**\n   * Handle ingredient change events.\n   *\n   * @param {number} index\n   * @param {Object} newIngValues\n   * @public\n   */\n  handleFieldChange = index => newIngValues => {\n    const ingredients = [...this.props.ingredients];\n    ingredients[index] = new Ingredient(newIngValues);\n    this.props.onChange(ingredients);\n  };\n\n  /**\n   * Render IngredientFormContainer.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        <h4>Ingredients</h4>\n        <div className=\"Ingredient-container\">\n          {this.props.ingredients.map((ingredient, index) => (\n            <IngredientForm\n              key={index}\n              ingredient={ingredient}\n              onChange={this.handleFieldChange(index)}\n              showDeleteButton={this.shouldShowDeleteButton}\n              requestDeleteGroup={() => this.props.requestDeleteGroup(index)}\n            />\n          ))}\n          <div className=\"Ingredient-addBtn\">\n            <Button\n              text=\"Add Ingredient\"\n              link='#'\n              className=\"btn btn_tertiary\"\n              isBtn={true}\n              onClick={this.props.requestAddGroup}\n              preventDefault={true}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Tag from '../../models/Tag';\nimport Button from '../Button/Button';\n\n/**\n * TagForm component.\n *\n * @public\n */\nexport default class TagForm extends Component {\n  static propTypes = {\n    tag: PropTypes.instanceOf(Tag),\n    onChange: PropTypes.func.isRequired\n  };\n\n  /**\n   * Get the tag.\n   *\n   * @public\n   */\n  get tag() {\n    return this.props.tag;\n  }\n\n  /**\n   * Handle tag change events.\n   *\n   * @param {Object} event\n   * @public\n   */\n  handleFieldChange = () => event => {\n    const inputElement = event.target;\n    let tag = { ...this.props.tag };\n    tag[inputElement.name] = inputElement.value;\n    this.props.onChange(tag);\n  };\n\n  /**\n   * Render TagForm.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div className=\"TagForm-container\">\n        <label className=\"isHidden\">Tag</label>\n        <input\n          className=\"TagForm-input\"\n          type=\"text\"\n          name=\"name\"\n          value={this.props.tag.name}\n          onChange={this.handleFieldChange()}\n        />\n        <Button\n          text=\"&times;\"\n          link=\"#\"\n          isBtn={false}\n          className=\"Tag-removeIcon\"\n          onClick={() => this.props.requestDeleteTag()}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Tag from '../../models/Tag';\nimport TagForm from './TagForm';\nimport Button from '../Button/Button';\n\n/**\n * TagFormContainer component.\n *\n * @public\n */\nexport default class TagFormContainer extends Component {\n  static propTypes = {\n    onChange: PropTypes.func.isRequired,\n    requestDeleteTag: PropTypes.func.isRequired,\n    tags: PropTypes.arrayOf(PropTypes.instanceOf(Tag)),\n  };\n\n  /**\n   * Handle tag change events.\n   *\n   * @param {number} index\n   * @param {Object} newTagValues\n   * @public\n   */\n  handleFieldChange = index => newTagValues => {\n    \n    const tags = [...this.props.tags];\n    tags[index] = new Tag(newTagValues);\n    this.props.onChange(tags);\n  };\n\n  /**\n   * Render TagFormContainer.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div>\n        <h4>Tags</h4>\n        {this.props.tags.map((tag, index) => (\n          <TagForm\n            key={index}\n            tag={tag}\n            index={index}\n            onChange={this.handleFieldChange(index)}\n            requestDeleteTag={() => this.props.requestDeleteTag(index)}\n          />\n        ))}\n        <div className=\"Tag-addBtn\">\n          <Button\n            text=\"Add Tag\"\n            link=\"#\"\n            className=\"btn btn_tertiary\"\n            isBtn={true}\n            onClick={this.props.requestAddTag}\n            preventDefault={true}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport RecipeConfig from '../RecipeConfig';\nimport IngredientFormContainer from './IngredientFormContainer';\nimport Recipe from '../../models/Recipe';\nimport TagFormContainer from './TagFormContainer';\n\nconst recipeConfig = new RecipeConfig();\n\n/**\n * RecipeForm component.\n *\n * @public\n */\nexport default class RecipeForm extends Component {\n  static propTypes = {\n    recipe: PropTypes.instanceOf(Recipe),\n    handleSubmit: PropTypes.func.isRequired,\n    handleRecipeFieldChange: PropTypes.func.isRequired,\n    handleChildFieldChange: PropTypes.func.isRequired,\n    handleDeleteIngredientGroup: PropTypes.func.isRequired,\n    handleAddIngredientGroup: PropTypes.func.isRequired\n  };\n\n  /**\n   * Handle form submit.\n   *\n   * @async\n   * @param {Object} event\n   * @public\n   */\n  handleSubmit = async event => {\n    this.props.handleSubmit(event);\n  };\n\n  /**\n   * Render RecipeForm.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <form className=\"Recipe-container\" onSubmit={this.props.handleSubmit}>\n        <div className=\"Recipe-field\">\n          <label>Name</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.props.recipe.name}\n            onChange={this.props.handleRecipeFieldChange()}\n          />\n        </div>\n        <div className=\"Recipe-field\">\n          <label>Description:</label>\n          <textarea\n            name=\"description\"\n            rows={recipeConfig.textAreaConfig.rows}\n            cols={recipeConfig.textAreaConfig.columns}\n            value={this.props.recipe.description}\n            onChange={this.props.handleRecipeFieldChange()}\n          />\n        </div>\n        <TagFormContainer\n          tags={this.props.recipe.tags}\n          onChange={this.props.handleChildFieldChange('tags')}\n          requestDeleteTag={index => this.props.handleDeleteItemFromArray(index, 'tags')}\n          requestAddTag={() => this.props.handleAddTag()}\n        />\n        <IngredientFormContainer\n          ingredients={this.props.recipe.ingredients}\n          onChange={this.props.handleChildFieldChange('ingredients')}\n          requestDeleteGroup={index =>\n            this.props.handleDeleteIngredientGroup(index)\n          }\n          requestAddGroup={this.props.handleAddIngredientGroup}\n        />\n        <div>\n          <input className=\"btn btn_primary\" type=\"submit\" value=\"Submit\" />\n        </div>\n      </form>\n    );\n  }\n}\n","const WARNING = 'warning';\nconst ERROR = 'error';\nconst SUCCESS = 'success';\n\n/**\n * MessageService.\n */\nexport default class MessageService {\n\n  /**\n   * Available Statuses.\n   * \n   * @public\n   */\n  statuses = () => {\n    return {\n      WARNING: WARNING,\n      ERROR: ERROR,\n      SUCCESS: SUCCESS\n    }\n  }\n  \n  /**\n   * Get the message status after recipe POST has completed.\n   *\n   * @param {bool} saved\n   * @public\n   */\n  getPostMessageStatus = saved => {\n    console.log('getPostMessageStatus saved', saved);\n    return saved ? SUCCESS : ERROR;\n  };\n\n  /**\n   * Get the message after recipe POST has completed.\n   *\n   * @param {Boolean} saved\n   * @public\n   */\n  getSavedRecipeMessage = saved => {\n    return saved ? 'Recipe has been saved.' : 'Recipe has not been saved.';\n  };\n\n  /**\n   * Get the recipe not found status.\n   *\n   * @public\n   */\n  getRecipeNotFoundStatus = () => {\n    return WARNING;\n  }\n\n  /**\n   * Get recipe not found message.\n   * \n   * @public\n   */\n  getRecipeNotFoundMessage = () => {\n    return 'Recipe could not be found, try adding a new recipe';\n  }\n\n  /**\n   * Get the recipe not found status.\n   *\n   * @public\n   */\n  getRecipeUpdateStatus = () => {\n    return SUCCESS;\n  }\n\n  /**\n   * Get recipe not found message.\n   * \n   * @public\n   */\n  getRecipeUpdateMessage = (name = '') => {\n    return name + ' recipe has been updated.';\n  }\n\n  /**\n   * Get the recipe delete status.\n   *\n   * @public\n   */\n  getRecipeDeleteStatus = () => {\n    return SUCCESS;\n  }\n\n  /**\n   * Get recipe delete message.\n   * \n   * @public\n   */\n  getRecipeDeleteMessage = (name = '') => {\n    return name + ' recipe has been deleted.';\n  }\n\n  /**\n   * Get the recipe delete status.\n   *\n   * @public\n   */\n  getRecipeDeleteFailStatus = () => {\n    return ERROR;\n  }\n\n  /**\n   * Get recipe delete message.\n   * \n   * @public\n   */\n  getRecipeDeleteFailMessage = (name = '') => {\n    return name + ' recipe has not been deleted.';\n  }\n}\n","import React, { Component } from 'react';\nimport Page from '../Page';\nimport Recipe from '../../../models/Recipe';\nimport Ingredient from '../../../models/Ingredient';\nimport StorageHandler from '../../StorageHandler';\nimport RecipeForm from '../../Form/RecipeForm';\nimport MessageService from '../../Message/MessageService';\n\nimport './FormPage.css';\nimport Tag from '../../../models/Tag';\n\nconst storageHandler = new StorageHandler();\nconst messageService = new MessageService();\n\n/**\n * FormPage component.\n *\n * @public\n */\nexport default class FormPage extends Component {\n  /**\n   * FormPage constructor.\n   *\n   * @constructor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipe: new Recipe(),\n      pageTitle: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  /**\n   * Get recipe for editing\n   *\n   * @public\n   */\n  componentDidMount = async () => {\n    await this.getRecipeFromPath();\n    this.setPageTitle();\n  };\n\n  /**\n   * Set the page title based on initial state.\n   *\n   * @public\n   */\n  setPageTitle = () => {\n    const state = { ...this.state };\n\n    if (this.state.recipe.name !== '' && this.state.recipe.id !== '') {\n      state.pageTitle = 'Edit ' + this.state.recipe.name + ' recipe';\n    } else {\n      state.pageTitle = 'Add a Recipe';\n    }\n\n    this.setState(state);\n  };\n\n  /**\n   * Get recipe from path for editing.\n   *\n   * @public\n   */\n  getRecipeFromPath = async () => {\n    if (!this.props.match.params.hasOwnProperty('recipeId')) {\n      return;\n    }\n\n    const recipeId = parseInt(this.props.match.params.recipeId);\n    await storageHandler.getRecipeById(recipeId).then(recipe => {\n      if (recipe instanceof Recipe) {\n        this.setState({ recipe: recipe });\n      } else {\n        this.props.messageUtility.setMessage(\n          messageService.getRecipeNotFoundStatus(),\n          messageService.getRecipeNotFoundMessage()\n        );\n        this.props.history.push('/recipe/add');\n      }\n    });\n  };\n\n  /**\n   * Handle top level field changes.\n   *\n   * @param {Object} event\n   * @public\n   */\n  handleRecipeFieldChange = () => event => {\n    const recipeFieldElement = event.target;\n    const recipe = this.state.recipe;\n    recipe[recipeFieldElement.name] = recipeFieldElement.value;\n    this.setState({\n      recipe: recipe\n    });\n  };\n\n  /**\n   * Handle child field changes.\n   *\n   * @param {string} field\n   * @param {Object} newValuesCollection\n   * @public\n   */\n  handleChildFieldChange = field => newValuesCollection => {\n    const state = { ...this.state };\n    state.recipe[field] = newValuesCollection;\n    this.setState(state);\n  };\n\n  /**\n   * Add an ingredient group.\n   *\n   * @public\n   */\n  handleAddIngredientGroup = () => {\n    const recipe = this.state.recipe;\n    recipe.ingredients = recipe.ingredients.concat([new Ingredient()]);\n    this.setState({ recipe: recipe });\n  };\n\n  /**\n   * Add a tag.\n   *\n   * @public\n   */\n  handleAddTag = () => {\n    const recipe = this.state.recipe;\n    recipe.tags = recipe.tags.concat([new Tag()]);\n    this.setState({ recipe: recipe });\n  };\n\n  /**\n   * Remove an ingredient group.\n   *\n   * @param {number} index\n   * @public\n   */\n  handleDeleteIngredientGroup = index => {\n    const recipe = this.state.recipe;\n    recipe.ingredients = recipe.ingredients.filter(\n      (ing, ingIdx) => index !== ingIdx\n    );\n    this.setState({ recipe: recipe });\n  };\n\n  /**\n   * Remove an item from array.\n   *\n   * @param {number} index\n   * @public\n   */\n  handleDeleteItemFromArray = (index, propName) => {\n    console.log(index, propName);\n    const recipe = this.state.recipe;\n    recipe[propName] = recipe[propName].filter(\n      (item, itemIdx) => index !== itemIdx\n    );\n    this.setState({ recipe: recipe });\n  };\n\n  /**\n   * Handle form submit.\n   *\n   * @async\n   * @param {Object} event\n   * @public\n   */\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    if (\n      this.state.recipe.hasOwnProperty('id') &&\n      this.state.recipe.id !== '' &&\n      this.state.recipe.id !== undefined\n    ) {\n      // Handle update recipe.\n      await storageHandler.putRecipe(this.state.recipe).then(res => {\n        this.props.messageUtility.setMessage(\n          messageService.getRecipeUpdateStatus(res.data),\n          messageService.getRecipeUpdateMessage(this.state.recipe.name)\n        );\n        return res;\n      });\n    } else {\n      // Handle save new recipe.\n      await storageHandler.postRecipe(this.state.recipe).then(res => {\n        this.props.messageUtility.setMessage(\n          messageService.getPostMessageStatus(res.data),\n          messageService.getSavedRecipeMessage(res.data)\n        );\n        return res;\n      });\n    }\n\n    this.props.history.push('/');\n  };\n\n  /**\n   * Render FormPage.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <Page\n        pageTitle={this.state.pageTitle}\n        messageUtility={this.props.messageUtility}\n      >\n        <RecipeForm\n          recipe={this.state.recipe}\n          handleSubmit={event => this.handleSubmit(event)}\n          handleRecipeFieldChange={() => this.handleRecipeFieldChange()}\n          handleChildFieldChange={fieldName =>\n            this.handleChildFieldChange(fieldName)\n          }\n          handleDeleteIngredientGroup={index =>\n            this.handleDeleteIngredientGroup(index)\n          }\n          handleDeleteItemFromArray={(index, propName) => {\n            this.handleDeleteItemFromArray(index, propName);\n          }}\n          handleAddIngredientGroup={() => this.handleAddIngredientGroup()}\n          handleAddTag={() => this.handleAddTag()}\n        />\n      </Page>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button/Button';\n\nimport './Modal.css';\n\n/**\n * DeleteModal component.\n *\n * @public\n */\nexport default class Modal extends Component {\n  static propTypes = {\n    show: PropTypes.bool.isRequired,\n    hideModal: PropTypes.func.isRequired,\n    children: PropTypes.instanceOf(Object).isRequired,\n  };\n\n  /**\n   * Get the show hide class name.\n   *\n   * @param {Boolean} show\n   * @public\n   */\n  getShowHideClassName = show => {\n    return show ? 'Modal Modal-display' : 'Modal Modal-hide';\n  };\n\n  /**\n   * Render the modal.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div className={this.getShowHideClassName(this.props.show)}>\n        <section className=\"Modal-main\">\n          {this.props.children}\n          <div className=\"Modal-btnCloseContainer\">\n            <Button\n              text=\"Close\"\n              link=\"#\"\n              className=\"btn btn_tertiary btn_modalClose\"\n              isBtn={true}\n              onClick={() => this.props.hideModal()}\n            />\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from './Modal';\nimport Button from '../Button/Button';\n\n/**\n * DeleteRecipeModal component.\n *\n * @public\n */\nexport default class DeleteRecipeModal extends Component {\n  static propTypes = {\n    showModal: PropTypes.bool.isRequired,\n    hideModal: PropTypes.func.isRequired,\n    handleDeleteRecipe: PropTypes.func.isRequired,\n    deleteRecipe: PropTypes.instanceOf(Object).isRequired\n  };\n\n  /**\n   * Get the name of the recipe to delete.\n   *\n   * @public\n   */\n  get recipeName() {\n    if (\n      this.props.deleteRecipe.hasOwnProperty('name') &&\n      this.props.deleteRecipe.name !== undefined &&\n      this.props.deleteRecipe.name !== null &&\n      this.props.deleteRecipe.name !== ''\n    ) {\n      return this.props.deleteRecipe.name;\n    }\n\n    return 'this';\n  }\n  render() {\n    return (\n      <Modal show={this.props.showModal} hideModal={this.props.hideModal}>\n        <div className=\"ListRecipe-deleteModal\">\n          <h3>Are you sure you would like delete {this.recipeName} recipe?</h3>\n          <div className=\"ListRecipe-buttonGroup\">\n            <Button\n              text=\"Yes\"\n              link=\"#\"\n              className=\"btn btn_secondary\"\n              isBtn={true}\n              onClick={() => this.props.handleDeleteRecipe()}\n            />\n            <Button\n              text=\"No\"\n              link=\"#\"\n              className=\"btn btn_primary\"\n              isBtn={true}\n              onClick={() => this.props.hideModal()}\n            />\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * AccordionSection component.\n *\n * @public\n */\nclass AccordionSection extends Component {\n  static propTypes = {\n    children: PropTypes.instanceOf(Object).isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired\n  };\n\n  /**\n   * Get arrow used for accordion section.\n   *\n   * @param {isOpen}\n   */\n  getArrowIcon(isOpen) {\n    if (isOpen) return <span>&#9660;</span>;\n\n    return <span>&#9650;</span>;\n  }\n\n  /**\n   * Get the container class to specify if the accordion is open or not.\n   *\n   * @public\n   */\n  getContainerClass() {\n    if (this.props.isOpen) return 'Accordion-container Accordion-selected';\n\n    return 'Accordion-container';\n  }\n\n  /**\n   * Handle open and closing the accordion.\n   *\n   * @public\n   */\n  onClick = event => {\n    this.props.onClick(this.props.label, event);\n  };\n\n  /**\n   * Render AccordionSection.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div className={this.getContainerClass()}>\n        <div className=\"Accordion-details\" onClick={this.onClick}>\n          <div>\n            <h3 className=\"Accordion-title\">{this.props.label}</h3>\n            <span className=\"Accordion-icon\">\n              {this.getArrowIcon(this.props.isOpen)}\n            </span>\n          </div>\n\n          {this.props.isOpen && (\n            <div>\n              <hr />\n              <p>{this.props.description}</p>\n              <div className=\"Accordion-inner\">{this.props.children}</div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AccordionSection;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport AccordionSection from './AccordionSection';\n\nimport './Accordion.css';\n\n/**\n * Accordion component.\n * \n * @public\n */\nclass Accordion extends Component {\n  static propTypes = {\n    allowMultipleOpen: PropTypes.bool,\n    children: PropTypes.instanceOf(Object).isRequired\n  };\n\n  static defaultProps = {\n    allowMultipleOpen: false\n  };\n\n  /**\n   * Accordion constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    const openSections = {};\n\n    this.props.children.forEach((child, index) => {\n      if (child.props.isOpen) {\n        openSections[child.props.label] = true;\n      } else {\n      }\n    });\n\n    this.state = { openSections };\n  }\n\n  /**\n   * Handle opening and closing accordions.\n   *\n   * @param {string} label\n   * @public\n   */\n  onClick = label => {\n    const {\n      props: { allowMultipleOpen },\n      state: { openSections }\n    } = this;\n\n    const isOpen = !!openSections[label];\n\n    if (allowMultipleOpen) {\n      this.setState({\n        openSections: {\n          ...openSections,\n          [label]: !isOpen\n        }\n      });\n    } else {\n      this.setState({\n        openSections: {\n          [label]: !isOpen\n        }\n      });\n    }\n  };\n\n  /**\n   * Render Accordion.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <li>\n        {this.props.children.map((child, index) => (\n          <AccordionSection\n            key={index}\n            isOpen={!!this.state.openSections[child.props.label]}\n            label={child.props.label}\n            description={child.props.description}\n            onClick={this.onClick}\n          >\n            {child.props.children}\n          </AccordionSection>\n        ))}\n      </li>\n    );\n  }\n}\n\nexport default Accordion;\n","import React from 'react';\n\nexport default class ListIngredient extends React.Component {\n  render() {\n    return (\n      <li>\n        <h3>\n          {this.props.ingredient.amount} {this.props.ingredient.measurementType} - {this.props.ingredient.name}\n        </h3>\n        <div />\n      </li>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Accordion from './Accordion';\nimport ListIngredient from '../Page/ListPage/ListIngredient';\nimport Button from '../Button/Button';\nimport Recipe from '../../models/Recipe';\n\n/**\n * ListPageAccordion component.\n *\n * @public\n */\nexport default class ListPageAccordion extends Component {\n  static propTypes = {\n    showModal: PropTypes.func.isRequired,\n    recipes: PropTypes.arrayOf(PropTypes.instanceOf(Recipe)).isRequired\n  };\n\n  /**\n   * Render ListPageAccordion.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <ul className=\"ListRecipe-container\">\n        <Accordion allowMultipleOpen>\n          {this.props.recipes.map((recipe, index) => (\n            <div\n              key={index}\n              label={recipe.name}\n              description={recipe.description}\n            >\n              <ul>\n                <h4>Ingredients</h4>\n                {recipe.ingredients.map((ingredient, index) => (\n                  <ListIngredient key={index} ingredient={ingredient} />\n                ))}\n              </ul>\n              <div>\n                <Button\n                  text=\"Edit recipe\"\n                  link={\"recipe/edit/\" + recipe.id}\n                  className=\"btn btn_tertiary\"\n                  isBtn={true}\n                />\n                <Button\n                  text=\"Delete recipe\"\n                  link=\"#\"\n                  className=\"btn btn_secondary\"\n                  isBtn={true}\n                  onClick={() => this.props.showModal(recipe)}\n                />\n              </div>\n            </div>\n          ))}\n        </Accordion>\n      </ul>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ListPageAccordion from '../Accordion/ListPageAccordion';\nimport Recipe from '../../models/Recipe';\n\n/**\n * ListPageFilterForm component.\n *\n * @public\n */\nexport default class ListPageFilterForm extends Component {\n  static propTypes = {\n    showModal: PropTypes.func.isRequired,\n    filterList: PropTypes.func.isRequired,\n    recipes: PropTypes.arrayOf(PropTypes.instanceOf(Recipe))\n  };\n\n  /**\n   * Handle the filtering of the list.\n   * \n   * @param {Object} event\n   * @public\n   */\n  filterList = event => {\n    this.props.filterList(event);\n  };\n\n  /**\n   * Render ListPageFilterForm\n   *\n   * @public\n   */\n  render() {\n    return (\n      <div className=\"ListPage-container\">\n        <form>\n          <fieldset>\n            <input\n              type=\"text\"\n              name=\"filterInput\"\n              value={this.props.filterValue}\n              className=\"ListPage-filterInput\"\n              placeholder=\"Search by Recipe name, Ingredient name, or Tag name\"\n              onChange={this.filterList}\n            />\n          </fieldset>\n        </form>\n        <ListPageAccordion\n          recipes={this.props.recipes}\n          showModal={recipe => this.props.showModal(recipe)}\n        />\n      </div>\n    );\n  }\n}\n","/**\n * FilterHandler\n *\n * Handle live filtering.\n */\nexport default class FilterHandler {\n  /**\n   * Filter a array by filter value.\n   *\n   * @param {Object[]} items\n   * @param {string}} filterValue\n   */\n  filterItems(items, filterValue) {\n    items = items.filter(item => {\n      return this.search(item, filterValue);\n    });\n\n    return items;\n  }\n\n  /**\n   * Search for a match recursively.\n   *\n   * @param {*} haystack\n   * @param {string} string\n   * @public\n   */\n  search(haystack, needle) {\n    if (haystack instanceof Array) {\n      for (let i = 0; i < haystack.length; i++) {\n        if (this.search(haystack[i], needle)) {\n          return true;\n        }\n      }\n    } else if (typeof haystack === 'object') {\n      for (const key in haystack) {\n        if (this.search(haystack[key], needle)) {\n          return true;\n        }\n      }\n    } else {\n      return (\n        String(haystack)\n          .toLowerCase()\n          .search(needle.toLowerCase()) !== -1\n      );\n    }\n\n    return false;\n  }\n}\n","import React, { Component } from 'react';\nimport Page from '../Page';\nimport DeleteRecipeModal from '../../Modal/DeleteRecipeModal';\nimport StorageHandler from '../../StorageHandler';\nimport MessageService from '../../Message/MessageService';\nimport Recipe from '../../../models/Recipe';\nimport ListPageFilterForm from '../../Form/ListPageFilterForm';\nimport FilterHandler from '../../FilterHandler';\nimport './ListPage.css';\n\nconst storageHandler = new StorageHandler();\nconst messageService = new MessageService();\nconst filterHandler = new FilterHandler();\n\nexport default class ListPage extends Component {\n  /**\n   * ListPage constructor.\n   *\n   * @public\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      showModal: false,\n      deleteRecipe: {},\n      recipes: [],\n      filteredRecipes: [],\n      filterValue: ''\n    };\n  }\n\n  /**\n   * Get recipes and set them to state.\n   *\n   * @public\n   */\n  componentDidMount = () => {\n    this.updateStateWithRecipes();\n  };\n\n  /**\n   * Show the modal.\n   *\n   * @param {Object} recipe\n   * @public\n   */\n  showModal = recipe => {\n    this.setState({ showModal: true, deleteRecipe: recipe });\n  };\n\n  /**\n   * Hide the modal\n   *\n   * @public\n   */\n  hideModal = () => {\n    this.setState({ showModal: false });\n  };\n\n  /**\n   * Update state with new recipes.\n   *\n   * @public\n   */\n  updateStateWithRecipes = () => {\n    storageHandler.getRecipes().then(recipes => {\n      if (recipes && recipes.length > 0 && recipes[0] instanceof Recipe) {\n        this.setState({ recipes: recipes, filteredRecipes: recipes });\n      } else {\n        this.setState({ recipes: [], filteredRecipes: [] });\n      }\n    });\n  };\n\n  /**\n   * Handle delete of a recipe.\n   *\n   * @public\n   */\n  handleDeleteRecipe = () => {\n    const recipe = this.state.deleteRecipe;\n    storageHandler.deleteRecipeById(recipe.id).then(res => {\n      if (res) {\n        this.props.messageUtility.setMessage(\n          messageService.getRecipeDeleteStatus(),\n          messageService.getRecipeDeleteMessage(recipe.name)\n        );\n      } else {\n        this.props.messageUtility.setMessage(\n          messageService.getRecipeDeleteFailStatus(),\n          messageService.getRecipeDeleteFailMessage(recipe.name)\n        );\n      }\n\n      this.setState({ showModal: false });\n      this.updateStateWithRecipes();\n    });\n  };\n\n  /**\n   * Filter the recipes.\n   *\n   * @param {Object} event\n   * @public\n   */\n  filterList = event => {\n    const state = this.state;\n    state.filterValue = event.target.value;\n    this.setState(state);\n\n    // If there is no filter applied then we should revert\n    // the list to the original list of recipes.\n    if (event.target.value === '') {\n      this.setState({ filteredRecipes: this.state.recipes });\n      return;\n    }\n\n    // Start filtering with the unfiltered list of items\n    // so that every item is accounted for in the filtering.\n    const updatedList = filterHandler.filterItems(\n      this.state.recipes,\n      event.target.value\n    );\n\n    this.setState({ filteredRecipes: updatedList });\n  };\n\n  /**\n   * Render the form.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <Page pageTitle=\"Recipes\" messageUtility={this.props.messageUtility}>\n        <ListPageFilterForm\n          filterValue={this.state.filterValue}\n          recipes={this.state.filteredRecipes}\n          showModal={recipe => this.showModal(recipe)}\n          filterList={event => this.filterList(event)}\n        />\n        <DeleteRecipeModal\n          showModal={this.state.showModal}\n          handleDeleteRecipe={() => this.handleDeleteRecipe()}\n          hideModal={() => this.hideModal()}\n          deleteRecipe={this.state.deleteRecipe}\n        />\n      </Page>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Page from '../Page';\nimport GitHubLogin from 'react-github-login';\nimport AuthHandler from '../../AuthHandler';\n\nconst authHandler = new AuthHandler();\n\nexport default class LoginPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      client_id: ''\n    };\n  }\n\n  componentDidMount = async () => {\n    const client_id = await authHandler.getClientId();\n    console.log('client_id', client_id.data);\n    this.setState({ client_id: client_id.data });\n  };\n\n  /**\n   * Handle successful login\n   *\n   * @param {Object} response\n   * @public\n   */\n  onSuccess = async code => {\n    console.log('success', code);\n    const accessToken = await authHandler.getAccessToken(code);\n    console.log('accessToken', accessToken.data);\n  };\n\n  /**\n   * Handle error login\n   *\n   * @param {Object} response\n   * @public\n   */\n  onFailure = response => console.error('error', response);\n\n  /**\n   * Render the form.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <Page pageTitle=\"Login\" messageUtility={this.props.messageUtility}>\n        <GitHubLogin\n          clientId={this.state.client_id}\n          onSuccess={this.onSuccess}\n          onFailure={this.onFailure}\n          redirectUri={authHandler.endpoints.redirectUri}\n        />\n      </Page>\n    );\n  }\n}\n","/**\n * AuthHandler service.\n *\n * @public\n */\nexport default class AuthHandler {\n  /**\n   * StorageHandler constructor.\n   *\n   * @public\n   */\n  constructor() {\n    this.endpoints = {\n      host: 'http://localhost:5000',\n      accessToken: '/auth/login/',\n      clientId: '/auth/get/client_id',\n      redirectUri: 'http://localhost:5000/login',\n    };\n  }\n\n  /**\n   * Get the client_id from the server.\n   */\n  getClientId = async () => {\n      return await this.makeRequest(this.endpoints.clientId);\n  }\n\n  /**\n   * Get the access github access token\n   *\n   * @param {string} code\n   * @public\n   */\n  getAccessToken = async code => {\n    const headers = new Headers();\n    headers.append('Content-type', 'application/json');\n    headers.append('Accept', 'application/json');\n\n    const json = JSON.stringify(code);\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: json\n    };\n\n    console.log('Try to get access token');\n\n    return await this.makeRequest(this.endpoints.accessToken, options);\n  };\n\n  /**\n   * Make a request.\n   *\n   * @param {endpoint}\n   * @param {options}\n   * @public\n   */\n  makeRequest = async (endpoint, options = {}) => {\n    return fetch(this.endpoints.host + endpoint, options)\n      .then(response => response.json())\n      .then(result => {\n        return result;\n      })\n      .catch(error => {\n        console.log('error', error);\n        return error;\n      });\n  };\n}\n","import React from 'react';\nimport Button from '../Button/Button';\n\n/**\n * MenuItem component.\n */\nconst MenuItem = ({ path, text }) => {\n  return <Button className=\"MainMenu-menuItem\" link={path} text={text} />;\n};\n\nexport default MenuItem;\n","const Routes = () => {\n    return [\n      {\n        path: '/recipe/add',\n        text: 'Add a Recipe',\n        className: ''\n      },\n      {\n        path: '/',\n        text: 'View Recipes',\n        className: ''\n      },\n      {\n        path: '/login',\n        text: 'Login',\n        className: ''\n      }\n    ];\n  };\n  \n  export default Routes();\n  ","import React from 'react';\nimport MenuItem from './MenuItem';\nimport Routes from '../../Routes';\n\nimport './MainMenu.css';\n\nconst MainMenu = () => {\n  return (\n    <div className=\"MainMenu-container\">\n      {Routes.map((route, index) => (\n        <MenuItem\n          key={index}\n          menuClass={route.className}\n          path={route.path}\n          text={route.text}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default MainMenu;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport FormPage from './components/Page/FormPage/FormPage';\nimport ListPage from './components/Page/ListPage/ListPage';\nimport LoginPage from './components/Page/Login/LoginPage';\nimport MainMenu from './components/Menu/MainMenu';\nimport Message from './components/Message/Message';\nimport './App.css';\n\n/**\n * App component.\n */\nclass App extends Component {\n  /**\n   * App contructor.\n   *\n   * @public\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: new Message(),\n      getMessage: () => this.getMessage(),\n      clearMessages: () => this.clearMessages(),\n      setMessage: (status, text) => this.setMessage(status, text),\n      toggleMessageShown: () => this.toggleMessageShown()\n    };\n  }\n\n  /**\n   * Clear message.\n   *\n   * @public\n   */\n  clearMessages = async () => {\n    await this.setState(new Message());\n  };\n\n  /**\n   * Get the message properties\n   * \n   * @public\n   */\n  getMessage = () => {\n    return this.state.message.props;\n  }\n\n  /**\n   * Set message.\n   *\n   * @public\n   */\n  setMessage = async (status, text) => {\n    await this.setState({ message: new Message({ status, text }) });\n  };\n\n  /**\n   * Toggle whether the message has been shown.\n   *\n   * @public\n   */\n  toggleMessageShown = async () => {\n    if (this.state.message) {\n      const state = this.state.message;\n      state.message.shown = state.message.shown === true ? false : true;\n      await this.setState(state);\n    }\n  };\n\n  /**\n   * Render App component.\n   *\n   * @public\n   */\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <MainMenu />\n          </header>\n            <section className=\"App-body\">\n              <Switch>\n                <PropsRoute\n                  exact\n                  path=\"/\"\n                  component={ListPage}\n                  messageUtility={this.state}\n                />\n                <PropsRoute\n                  exact\n                  path=\"/recipe/add\"\n                  component={FormPage}\n                  messageUtility={this.state}\n                />\n                <PropsRoute\n                  exact\n                  path=\"/recipe/edit/:recipeId\"\n                  component={FormPage}\n                  messageUtility={this.state}\n                />\n                <PropsRoute\n                  exact\n                  path=\"/login\"\n                  component={LoginPage}\n                  messageUtility={this.state}\n                />\n              </Switch>\n            </section>\n        </div>\n      </Router>\n    );\n  }\n}\n\n/**\n * Render component with merged props.\n * \n * @param {Object} component \n * @param  {...any} props \n */\nconst renderMergedProps = (component, ...props) => {\n  const finalProps = Object.assign({}, ...props);\n  return React.createElement(component, finalProps);\n};\n\n/**\n * Add props to a route.\n * \n * @param {Object} Object\n * @param {Object} component\n * @param {...any} props\n */\nconst PropsRoute = ({ component, ...props }) => {\n  return (\n    <Route\n      {...props}\n      render={routeProps => {\n        return renderMergedProps(component, routeProps, props);\n      }}\n    />\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}